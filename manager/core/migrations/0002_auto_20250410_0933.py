# Generated by Django 2.2.16 on 2025-04-10 09:33

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='FlushingAgentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Название средства')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'Тип моющего средства',
                'verbose_name_plural': 'Типы моющих средств',
                'ordering': ['name'],
            },
        ),
        migrations.AlterField(
            model_name='employee',
            name='glove_size',
            field=models.FloatField(blank=True, choices=[(6.0, '6.0'), (6.5, '6.5'), (7.0, '7.0'), (7.5, '7.5'), (8.0, '8.0'), (8.5, '8.5'), (9.0, '9.0'), (9.5, '9.5'), (10.0, '10.0'), (10.5, '10.5'), (11.0, '11.0'), (11.5, '11.5'), (12.0, '12.0')], help_text='Пример: 8.0, 8.5 ... 11.0', null=True, verbose_name='Размер перчаток'),
        ),
        migrations.AlterField(
            model_name='employee',
            name='id',
            field=models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.AlterField(
            model_name='heightgroup',
            name='id',
            field=models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.AlterField(
            model_name='issue',
            name='id',
            field=models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.AlterField(
            model_name='norm',
            name='id',
            field=models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.AlterField(
            model_name='normheight',
            name='id',
            field=models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.AlterField(
            model_name='position',
            name='id',
            field=models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.AlterField(
            model_name='ppetype',
            name='id',
            field=models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.CreateModel(
            name='FlushingAgentIssue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_name', models.CharField(max_length=255, verbose_name='Наименование')),
                ('volume_ml', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Объем (мл)')),
                ('issue_date', models.DateField(default=django.utils.timezone.now, verbose_name='Дата выдачи')),
                ('item_mu', models.CharField(choices=[('шт.', 'штук'), ('пар.', 'пар'), ('компл.', 'комплектов'), ('г.', 'грамм'), ('мл.', 'миллилитров')], default='мл.', max_length=10, verbose_name='Единица измерения')),
                ('agent_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.FlushingAgentType', verbose_name='Тип средства')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Employee', verbose_name='Сотрудник')),
            ],
            options={
                'verbose_name': 'Выдача моющего средства',
                'verbose_name_plural': 'Выдачи моющих средств',
                'ordering': ['-issue_date'],
            },
        ),
        migrations.CreateModel(
            name='Container',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_ml', models.PositiveIntegerField(default=0, verbose_name='Общий объем (мл)')),
                ('last_deduction', models.DateField(blank=True, null=True, verbose_name='Последнее списание')),
                ('agent_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.FlushingAgentType', verbose_name='Тип средства')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Employee', verbose_name='Сотрудник')),
            ],
            options={
                'verbose_name': 'Контейнер',
                'verbose_name_plural': 'Контейнеры',
            },
        ),
        migrations.CreateModel(
            name='FlushingAgentNorm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('monthly_ml', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Норма расхода (мл/мес)')),
                ('agent_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.FlushingAgentType', verbose_name='Тип средства')),
                ('position', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Position', verbose_name='Должность')),
            ],
            options={
                'verbose_name': 'Норма моющих средств',
                'verbose_name_plural': 'Нормы моющих средств',
                'ordering': ['position'],
                'unique_together': {('position', 'agent_type')},
            },
        ),
        migrations.AddIndex(
            model_name='container',
            index=models.Index(fields=['employee', 'agent_type'], name='core_contai_employe_4b5d4a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='container',
            unique_together={('employee', 'agent_type')},
        ),
    ]
