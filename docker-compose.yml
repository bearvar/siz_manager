services:
  migrations:
    build: 
      context: .
      args:
        - SECRET_KEY=${SECRET_KEY}
    volumes:
      - persistent_data:/app/manager/data
    env_file: 
      - .env
    command: sh -c "python manager/manage.py makemigrations core --noinput && python manager/manage.py migrate"
    restart: on-failure
    networks: 
      backend:

  web:
    build:
      context: .
      args:
        - SECRET_KEY=${SECRET_KEY}
    depends_on:
      migrations:
        condition: service_completed_successfully
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health/ || exit 1"]
      interval: 300s
      timeout: 5s
      retries: 5
      start_period: 40s
    logging:
      options:
        max-size: "20m"
        max-file: "5"
    volumes:
      - persistent_data:/app/manager/data
      - static_volume:/app/manager/staticfiles
      - media_volume:/app/manager/media
      - backup_volume:/app/backups
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=1
      - GUNICORN_CMD_ARGS=--access-logfile - --error-logfile - --capture-output --log-level info --preload
      - SQLITE_TIMEOUT=30
      - SQLITE_MMAP_SIZE=268435456
    command: >
      dumb-init sh -c "
        echo 'Starting backup service...' &&
        (crontab -l 2>/dev/null; echo '0 2 * * * /app/backups/backup_db.sh') | crontab - &&
        service cron start &&
        gunicorn --bind 0.0.0.0:8000 --workers 1 --threads 4 --pythonpath manager manager.wsgi:application
      "

  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/var/www/staticfiles
      - media_volume:/var/www/media
    depends_on:
      - web

networks:
  backend:
    driver: bridge

volumes:
  persistent_data:
  static_volume:
  media_volume:
  backup_volume:
