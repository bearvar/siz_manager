SIZ Application Deployment Guide
1. Prerequisites
Docker installed (Linux/Windows)

Docker Compose installed (comes with Docker Desktop for Windows)

Minimum 2GB RAM allocated to Docker

2. Setup Project Structure
For Linux/MacOS:
bash
mkdir -p siz/{data,static,media,backups}
cd siz
For Windows (PowerShell):
powershell
New-Item -Path "siz" -ItemType Directory
cd siz
New-Item -Path "data,static,media,backups" -ItemType Directory
3. Create Environment File (.env.prod)
Generate secret key:

bash
# Linux/MacOS:
echo "SECRET_KEY=$(openssl rand -base64 64 | tr -d '\n')" >> .env.prod

# Windows (if you have OpenSSL):
openssl rand -base64 64 | set /p SECRET_KEY= >> .env.prod
For Windows without OpenSSL, use Djecrety and manually add to file

Edit .env.prod with these variables:

ini
# Django Settings
DEBUG=0
ALLOWED_HOSTS=localhost,127.0.0.1,[your-domain]
SECRET_KEY=your-generated-key-here

# Database Configuration
SQLITE_DB_PATH=/app/manager/data/db.sqlite3

# Email Settings (configure these for production)
EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend
DEFAULT_FROM_EMAIL=webmaster@localhost
4. Create docker-compose.prod.yml
yaml
version: '3.8'

services:
  web:
    image: cr.yandex/crp2hgrg6imtfn9h9lpi/siz_manager:1.0.1
    env_file: .env.prod
    volumes:
      - ./data:/app/manager/data:rw,cached
      - ./static:/app/manager/staticfiles:ro
      - ./media:/app/manager/media:rw,cached
      - ./backups:/app/backups:rw
    networks:
      - backend
    restart: unless-stopped
    command: >
      dumb-init sh -c "
        python manager/manage.py migrate --noinput &&
        (crontab -l 2>/dev/null; echo '0 2 * * * flock -n /app/backups/backup.lock /app/backup_db.sh') | crontab - &&
        service cron start &&
        gunicorn --bind 0.0.0.0:8000 \
                 --workers $$(( $(nproc) * 2 + 1 )) \
                 --threads 2 \
                 --pythonpath manager \
                 --preload \
                 manager.wsgi:application
      "

  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx-prod.conf:/etc/nginx/conf.d/default.conf
      - ./static:/var/www/staticfiles
      - ./media:/var/www/media
    depends_on:
      - web
    networks:
      - backend
    restart: unless-stopped

networks:
  backend:
5. First-Time Deployment
Start services:

bash
docker-compose -f docker-compose.prod.yml up -d
Apply database migrations:

bash
docker-compose -f docker-compose.prod.yml exec web python manager/manage.py migrate
Create superuser:

bash
docker-compose -f docker-compose.prod.yml exec web python manager/manage.py createsuperuser
Verify containers:

bash
docker-compose -f docker-compose.prod.yml ps
6. Post-Deployment Tasks
Load initial data (if needed):

bash
docker-compose -f docker-compose.prod.yml exec web python manager/manage.py loaddata initial_data.json
Set proper permissions (Linux only):

bash
sudo chown -R 1000:1000 data static media backups
7. Common Operations
View logs:

bash
docker-compose -f docker-compose.prod.yml logs -f
Stop services:

bash
docker-compose -f docker-compose.prod.yml down
Update deployment:

bash
docker-compose -f docker-compose.prod.yml pull
docker-compose -f docker-compose.prod.yml up -d --force-recreate
8. Security Considerations
Never commit .env.prod to version control

Set DEBUG=0 in production

Configure proper ALLOWED_HOSTS

Set up HTTPS (recommended)

Regular backups from ./backups directory

9. Verification Checklist
Application accessible at http://localhost

Admin panel at http://localhost/admin

Health check at http://localhost/health/

Static files serving correctly

Cron jobs running (check logs)